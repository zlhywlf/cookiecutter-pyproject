[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "{{ cookiecutter.project_slug }}"
readme = "README.md"
dynamic = ["version"]
requires-python = ">=3.7"
description = "{{ cookiecutter.description }}."
authors = [
  { name = "{{ cookiecutter.author }}", email = "{{ cookiecutter.email }}" },
]
classifiers = [
  "Framework :: AsyncIO",
  "Framework :: Pydantic",
  "Programming Language :: Python :: 3.7",
]
dependencies = [
]

[project.optional-dependencies]
dev = [
]

[project.urls]
"Homepage" = ""

[project.scripts]
{{ cookiecutter.project_slug } } = "{{ cookiecutter.project_slug }}.__main__:main"

[tool.hatch.build.targets.wheel]
packages = ["src/{{ cookiecutter.project_slug }}"]

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "src/{{ cookiecutter.project_slug }}/_version.py"
template = """
# file generated by setuptools_scm
# don't change, don't track in version control

version = {version!r}
version_tuple = {version_tuple!r}
"""

[tool.ruff]
line-length = 120
fix = true
preview = true
exclude = ["src/{{ cookiecutter.project_slug }}/_version.py"]

[tool.ruff.format]
docstring-code-format = true
line-ending = "lf"

[tool.ruff.lint]
select = [
  "A", "ANN", "ARG", "ASYNC", "B", "BLE", "C4", "COM", "CPY", "D", "DTZ", "E", "EM", "ERA", "F", "FBT", "I", "ICN",
  "ISC", "N", "PIE", "PT", "PTH", "PYI", "Q", "RET", "RSE", "RUF", "S", "SIM", "SLOT", "T20", "TD", "UP", "W",
]
ignore = ["COM812", "D203", "D213", "ISC001", "RUF029"]

[tool.ruff.lint.extend-per-file-ignores]
"test_*.py" = ["S101"]
"__init__.py" = ["D104", "CPY001"]
"src/{{ cookiecutter.project_slug }}/*" = ["N999"]

[tool.ruff.lint.isort]
combine-as-imports = true

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pytest.ini_options]
pythonpath = ["src", "tests"]

[tool.pytest_env]
DEBUG = true

[tool.mypy]
strict = true
python_version = "3.7"
files = ["src/{{ cookiecutter.project_slug }}", "tests"]

[[tool.mypy.overrides]]
module = []
ignore_missing_imports = true
